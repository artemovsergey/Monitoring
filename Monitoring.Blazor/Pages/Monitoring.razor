@page "/m"
@page "/"

@using global::Monitoring.Blazor.Models;
@using MonitoringApp.Blazor

<PageTitle>Мониторинг пользователей</PageTitle>
@inject HttpClient Http

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3> Пользователи получены с API </h3>
}


<style>
    .user-circle {
        width: 20px; /* Размер кружка */
        height: 20px; /* Размер кружка */
        background-color: green; /* Цвет кружка */
        border-radius: 50%; /* Сделать круглым */
    }

    .employee-circle {
        width: 20px; /* Размер кружка */
        height: 20px; /* Размер кружка */
        background-color: blue; /* Цвет кружка */
        border-radius: 50%; /* Сделать круглым */
    }

    .skud {
        background-color: #4679BD; /* Blue background */
        width: 200px; /* Example width */
        height: 200px; /* Example height */
        display: flex; /* Use flexbox for layout */
        flex-wrap: wrap; /* Allow wrapping of items */
        justify-content: space-around; /* Space items evenly */
        align-items: center; /* Center items vertically */
        padding: 20px; /* Add some padding inside the room */
    }

</style>

<div class="container">
    <div class="row">
      
        <div class="col-2 skud m-3 p-3 border border-3 border-warning" id="1">

            <!-- Проверка внутри контейнера 1 -->
            @foreach (var u in users)
            {
                @if (u.LastSecurityPointNumber == 1 && u.LastSecurityPointDirection == "in")
                {


                    @if (u.PersonRole == "user")
                    {
                        <div class="user-circle"> </div>
                    }
                    else
                    {
                        <div class="employee-circle"> </div>
                    }

                }
            }
        </div>



      
        <div class="skud col-md-2 m-3 p-3 border border-3 border-warning" id="1">

            <!-- Проверка внутри контейнера 1 -->
            @foreach (var u in users)
            {
                @if (u.LastSecurityPointNumber == 2 && u.LastSecurityPointDirection == "in")
                {


                    @if (u.PersonRole == "user")
                    {
                        <div class="user-circle"> </div>
                    }
                    else
                    {
                        <div class="employee-circle"> </div>
                    }

                }
            }
        </div>


    
        <div class="skud col-md-2 m-3 p-3 border border-3 border-warning" id="1">

            <!-- Проверка внутри контейнера 1 -->
            @foreach (var u in users)
            {
                @if (u.LastSecurityPointNumber == 3 && u.LastSecurityPointDirection == "in")
                {


                    @if (u.PersonRole == "user")
                    {
                        <div class="user-circle"> </div>
                    }
                    else
                    {
                        <div class="employee-circle"> </div>
                    }

                }
            }
        </div>


       
        <div class="skud col-md-2 m-3 p-3 border border-3 border-warning" id="1">

            <!-- Проверка внутри контейнера 1 -->
            @foreach (var u in users)
            {
                @if (u.LastSecurityPointNumber == 4 && u.LastSecurityPointDirection == "in")
                {


                    @if (u.PersonRole == "user")
                    {
                        <div class="user-circle"> </div>
                    }
                    else
                    {
                        <div class="employee-circle"> </div>
                    }

                }
            }
        </div>

     
        <div class="skud col-md-2 m-3 p-3 border border-3 border-warning" id="1">

            <!-- Проверка внутри контейнера 1 -->
            @foreach (var u in users)
            {
                @if (u.LastSecurityPointNumber == 5 && u.LastSecurityPointDirection == "in")
                {


                    @if (u.PersonRole == "user")
                    {
                        <div class="user-circle"> </div>
                    }
                    else
                    {
                        <div class="employee-circle"> </div>
                    }

                }
            }
        </div>
   </div>
</div>



 



@code {
    private IEnumerable<User> users;

    protected override async Task OnInitializedAsync()
    {
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(3));

        while (await timer.WaitForNextTickAsync())
        {
            await GetUsers();
            await Console.Out.WriteLineAsync("Запрос");
        }
    }

    private async Task GetUsers()
    {
        users = await Http.GetFromJsonAsync<IEnumerable<User>>("https://localhost:7214/api/users");
        StateHasChanged();
    }

}